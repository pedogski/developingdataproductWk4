library(knitr)
library(leaflet)
library(dplyr)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lat=4.982873, lng = 8.334503, popup = "THE CITY OF CALABAR, Calabar") %>%
addMarkers(lat = 6.3858,lng = 9.3745,popup ="Obudu ranch mountain resort,Obudu") %>%
addMarkers(lat = 9.0833,lng = 7.5361, popup="ASO ROCK, ABJ") %>%
addMarkers(lat = 7.7833333333,lng = 10.00000000, popup ="RIVER BENUE, MARKURDI") %>%
addMarkers(lat = 13.8601, lng = -3.333328, popup = "RIVER NIGER") %>%
addMarkers(lat=10.0,lng=8.0, popup="IPETU-IJESA, OSUN") %>%
addMarkers(lat=4.8177,lng=8.02593, popup="NSIT ATAI, AKWA IBOM STATE")
m  # Print the map
install.packages("maps")
library(maps)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lat=4.982873, lng = 8.334503, popup = "THE CITY OF CALABAR, Calabar") %>%
addMarkers(lat = 6.3858,lng = 9.3745,popup ="Obudu ranch mountain resort,Obudu") %>%
addMarkers(lat = 9.0833,lng = 7.5361, popup="ASO ROCK, ABJ") %>%
addMarkers(lat = 7.7833333333,lng = 10.00000000, popup ="RIVER BENUE, MARKURDI") %>%
addMarkers(lat = 13.8601, lng = -3.333328, popup = "RIVER NIGER") %>%
addMarkers(lat=10.0,lng=8.0, popup="IPETU-IJESA, OSUN") %>%
addMarkers(lat=4.8177,lng=8.02593, popup="NSIT ATAI, AKWA IBOM STATE") %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)%>%
addCircles(lng = ~Long, lat = ~Lat)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lat=4.982873, lng = 8.334503, popup = "THE CITY OF CALABAR, Calabar") %>%
addMarkers(lat = 6.3858,lng = 9.3745,popup ="Obudu ranch mountain resort,Obudu") %>%
addMarkers(lat = 9.0833,lng = 7.5361, popup="ASO ROCK, ABJ") %>%
addMarkers(lat = 7.7833333333,lng = 10.00000000, popup ="RIVER BENUE, MARKURDI") %>%
addMarkers(lat = 13.8601, lng = -3.333328, popup = "RIVER NIGER") %>%
addMarkers(lat=10.0,lng=8.0, popup="IPETU-IJESA, OSUN") %>%
addMarkers(lat=4.8177,lng=8.02593, popup="NSIT ATAI, AKWA IBOM STATE") %>%
addCircles(lng = ~Long, lat = ~Lat)
m <- leaflet() %>%
makeIcon()%>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lat=4.982873, lng = 8.334503, popup = "THE CITY OF CALABAR, Calabar") %>%
addMarkers(lat = 6.3858,lng = 9.3745,popup ="Obudu ranch mountain resort,Obudu") %>%
addMarkers(lat = 9.0833,lng = 7.5361, popup="ASO ROCK, ABJ") %>%
addMarkers(lat = 7.7833333333,lng = 10.00000000, popup ="RIVER BENUE, MARKURDI") %>%
addMarkers(lat = 13.8601, lng = -3.333328, popup = "RIVER NIGER") %>%
addMarkers(lat=10.0,lng=8.0, popup="IPETU-IJESA, OSUN") %>%
addMarkers(lat=4.8177,lng=8.02593, popup="NSIT ATAI, AKWA IBOM STATE")
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lat=4.982873, lng = 8.334503, popup = "THE CITY OF CALABAR, Calabar") %>%
addMarkers(lat = 6.3858,lng = 9.3745,popup ="Obudu ranch mountain resort,Obudu") %>%
addMarkers(lat = 9.0833,lng = 7.5361, popup="ASO ROCK, ABJ") %>%
addMarkers(lat = 7.7833333333,lng = 10.00000000, popup ="RIVER BENUE, MARKURDI") %>%
addMarkers(lat = 13.8601, lng = -3.333328, popup = "RIVER NIGER") %>%
addMarkers(lat=10.0,lng=8.0, popup="IPETU-IJESA, OSUN") %>%
addMarkers(lat=4.8177,lng=8.02593, popup="NSIT ATAI, AKWA IBOM STATE")
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lat=4.982873, lng = 8.334503, popup = "THE CITY OF CALABAR, Calabar") %>%
addMarkers(lat = 6.3858,lng = 9.3745,popup ="Obudu ranch mountain resort,Obudu") %>%
addMarkers(lat = 9.0833,lng = 7.5361, popup="ASO ROCK, ABJ") %>%
addMarkers(lat = 7.7833333333,lng = 10.00000000, popup ="RIVER BENUE, MARKURDI") %>%
addMarkers(lat = 13.8601, lng = -3.333328, popup = "RIVER NIGER") %>%
addMarkers(lat=7.4273,lng=4.9091, popup="IPETU-IJESA, OSUN") %>%
addMarkers(lat=4.8177,lng=8.02593, popup="NSIT ATAI, AKWA IBOM STATE")
m  # Print the map
install.packages("qdap")
matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3)
A <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3)
A[1,3] # INDEXING
A1 <- matrix(c(1,2,3,4,5,6,7,8,9), ncol = 3)
A1
A2 <- matrix(1:9 , nrow =3)
A2
A3<- matrix(a, nrow = 2)
a <- c(1,2,3,4,5,6,7,8,9)
A3<- matrix(a, nrow = 2)
A3
A4<- matrix(a, nrow = 4)
A4
unique(A4)
dim(A2)
dim(A4)
q()
options(stringsAsFactors=FALSE)
x <- data.frame(driver = c("Bowser", "Peach"), occupation = c("Koopa", "Princess"))
x$vehicle <- data.frame(model = c("Piranha Prowler", "Royal Racer"))
x$vehicle$stats <- data.frame(speed = c(55, 34), weight = c(67, 24), drift = c(35, 32))
str(x)
View(x)
str(flatten(x))
library("jsonlite", lib.loc="~/R/win-library/4.0")
str(flatten(x))
# Chunk 1: load library and data
library(MASS); library(corrplot); library(ggplot2); library(tidyverse);
library(plotly)
library(rgl); library(rglwidget)
data(biopsy)
# Chunk 2: cleaning data
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Chunk 3: Plotly plots of biospy data
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
colorscale = list(c(0, "rgb(227, 25, 54)"), list(1, "rgb(194, 205, 35)")),
showscale = T)) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(194, 205, 35))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(194, 205, 20))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(194, 205, 1))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(194, 0.5, 1))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(0, 0.5, 1))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~mnp,
color = ~as.factor(class), size = ~brtq,
text = ~paste("Class: ", age, '<br>mnp:', mnp),
type = "scatter", mode = "markers") %>%
layout(title = "Breast cancer Data")
plot_ly(data = bc, x = ~ts, y = ~brtq, type="scatter", mode = "markers",
name = "Tumor size", legendgroup = "Tumour size",
mode= "lines", fill= ~age) %>%
layout(title = "Breast cancer Data")
library(rgl)
with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age)))
subid <- currentSubscene3d()
rglwidget(elementId = "plot3drgl")
with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age)))
rglwidget(elementId = "plot3drgl")
library(rgl)
library(plotly)
plotly(with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age))),
rglwidget(elementId = "plot3drgl")
)
plotly(with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age))),
rglwidget(elementId = "plot3drgl")
)%>% toWebGL()
#suppressPackageStartupMessages(library(plotly))
#type1
plot_ly(data = bc, x = ~age, y = ~mnp,
color = ~as.factor(class), size = ~brtq,
text = ~paste("Class: ", age, '<br>mnp:', mnp),
type = "scatter", mode = "markers") %>%
layout(title = "Breast cancer Data")%>% toWebGL()
#type4
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
colorscale = list(c(0, "rgb(227, 25, 54)"), list(1, "rgb(194, 205, 35)")),
showscale = T)) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
) %>% toWebGL()
plot1 <- plotly(with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age))),
rglwidget(elementId = "plot3drgl")
)
plot1 <- with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age)))
rglwidget(elementId = "plot3drgl")
plot1 <- with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age)))
plot1a <- plot1 %>% plot_ly()
plot1a <- plot1 %>% plot_ly(bc)
plot1a <- plot_ly(bc)%>%plot1
m <- plot_ly(data = bc, x = ~age, y = ~mnp,
color = ~as.factor(class), size = ~brtq,
text = ~paste("Class: ", age, '<br>mnp:', mnp),
type = "scatter", mode = "markers") %>%
layout(title = "Breast cancer Data")
m %>% toWebGL()
library(MASS); library(corrplot); library(ggplot2); library(tidyverse);
library(plotly)
library(rgl); library(rglwidget)
data(biopsy)
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Point colors
marker <- list(color = ~class, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)
# Create the plot
p <- plot_ly(bc, x = ~age, y = ~mnp, z = ~brtq, marker = marker) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'age'),
yaxis = list(title = 'menopause'),
zaxis = list(title = 'breast quarter'),
title = "Breast cancer Data")
)
p
# Chunk 1: loading library and data
library(MASS); library(corrplot); library(ggplot2); library(tidyverse);
library(plotly)
library(rgl); library(rglwidget)
data(biopsy)
# Chunk 2: perform data cleaning
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Chunk 3: Plot
# Point colors
marker <- list(color = ~class, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)
# Create the plot
p <- plot_ly(bc, x = ~age, y = ~mnp, z = ~brtq, marker = marker) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'age'),
yaxis = list(title = 'menopause'),
zaxis = list(title = 'breast quarter'),
title = "Breast cancer Data")
)
p
# Chunk 1: loading library and data
library(MASS); library(corrplot); library(ggplot2); library(tidyverse);
library(plotly)
library(rgl); library(rglwidget)
data(biopsy)
# Chunk 2: perform data cleaning
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Chunk 3: Plot
# Point colors
marker <- list(color = ~class, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)
# Create the plot
p <- plot_ly(bc, x = ~age, y = ~mnp, z = ~brtq, marker = marker) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'age'),
yaxis = list(title = 'menopause'),
zaxis = list(title = 'breast quarter'),
title = "Breast cancer Data")
)
p
# Chunk 1: loading library and data
library(MASS); library(corrplot); library(ggplot2); library(tidyverse);
library(plotly)
library(rgl); library(rglwidget)
data(biopsy)
# Chunk 2: perform data cleaning
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Chunk 3: Plot
# Point colors
marker <- list(color = ~class, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)
# Create the plot
p <- plot_ly(bc, x = ~age, y = ~mnp, z = ~brtq, marker = marker) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'age'),
yaxis = list(title = 'menopause'),
zaxis = list(title = 'breast quarter'),
title = "Breast cancer Data")
)
p
traceback()
View(biopsy)
names(biopsy[2:9]) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat")
names(biopsy[2:9]) <- c(biopsy, "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat")
library(slidify)
traceback()
install.packages("knit2html")
knitr::opts_chunk$set(eval = TRUE, echo = TRUE, results = "hide", message = FALSE, warning = FALSE)
library("knitr")
library(shiny)
library(dplyr)
library(r2d3)
library(forcats)
library(MASS)
library(DT)
library(rlang)
biopsy <- attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
biop <- attach(biopsy)
names(biop) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
class(biop)
rm(list=ls())
class(biop)
biop <- attach(biopsy)
names(biop) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
biop <- attach(biopsy)
names(biop) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
names(biop)
biop <- attach(biopsy)
names(biop) <- c("id", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "Class" )
runApp('R/coursera/developing data product/developingdataproductWk4/moluwadare.R')
biopsy <- attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
traceback()
biopsy <- attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
Biopsy <- attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
curl -Lo rsc-installer.sh https://cdn.rstudio.com/connect/installer/installer-v1.1.0.sh
sudo bash ./rsc-installer.sh 1.8.4-11
curl -Lo rsc-installer.sh https://cdn.rstudio.com/connect/installer/installer-v1.1.0.sh
sudo bash ./rsc-installer.sh 1.8.4-11
library(shiny); runApp('R/TDI/FZBK.R')
runApp('R/TDI/FZBK.R')
library(shiny); runApp('R/coursera/developing data product/developingdataproductWk4/moluwadare.R')
runApp('R/coursera/developing data product/developingdataproductWk4/moluwadare.R')
rm(list=ls())
runApp('R/coursera/developing data product/developingdataproductWk4/moluwadare.R')
library(RCurl)
library(curl)
rsconnect::setAccountInfo(type?)
rsconnect::setAccountInfo(type)
rsconnect::setAccountInfo()
rsconnect::setAccountInfo(margaretoluwadare)
runApp('R/coursera/developing data product/developingdataproductWk4/moluwadare.R')
rsconnect::setAccountInfo(name='margaretoluwadareea', token='4BD60A336C50F969F87D6C786533E1B9', secret='zDqVtkGSXj1YltDXIsrMHgRfdzfDMFUP58qkl2Va')
library(rsconnect)
rsconnect::deployApp("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4/moluwadare.R")
library(rsconnect)
rsconnect::deployApp("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4")
runApp('R/coursera/developing data product/developingdataproductWk4/moluwadare.R')
q()
q()
getwd()
setwd("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4")
library(shiny)
library(MASS)
library(RCurl)
library(htmlwidgets)
library(htmltools)
library(dplyr)
library(r2d3)
library(forcats)
library(DT)
library(rlang)
Biopsy <- read.csv("biopsy.csv", header=TRUE)
r2d3_script <- "
// !preview r2d3 data= data.frame(y = 0.1, ylabel = '1%', fill = '#E69F00', mouseover = 'green', label = 'one', id = 1)
function svg_height() {return parseInt(svg.style('height'))}
function svg_width()  {return parseInt(svg.style('width'))}
function col_top()  {return svg_height() * 0.05; }
function col_left() {return svg_width()  * 0.20; }
function actual_max() {return d3.max(data, function (d) {return d.y; }); }
function col_width()  {return (svg_width() / actual_max()) * 0.55; }
function col_heigth() {return svg_height() / data.length * 0.95; }
var bars = svg.selectAll('rect').data(data);
bars.enter().append('rect')
.attr('x',      col_left())
.attr('y',      function(d, i) { return i * col_heigth() + col_top(); })
.attr('width',  function(d) { return d.y * col_width(); })
.attr('height', col_heigth() * 0.9)
.attr('fill',   function(d) {return d.fill; })
.attr('id',     function(d) {return (d.label); })
.on('click', function(){
Shiny.setInputValue('bar_clicked', d3.select(this).attr('id'), {priority: 'event'});
})
.on('mouseover', function(){
d3.select(this).attr('fill', function(d) {return d.mouseover; });
})
.on('mouseout', function(){
d3.select(this).attr('fill', function(d) {return d.fill; });
});
bars.transition()
.duration(500)
.attr('x',      col_left())
.attr('y',      function(d, i) { return i * col_heigth() + col_top(); })
.attr('width',  function(d) { return d.y * col_width(); })
.attr('height', col_heigth() * 0.9)
.attr('fill',   function(d) {return d.fill; })
.attr('id',     function(d) {return d.label; });
bars.exit().remove();
// Identity labels
var txt = svg.selectAll('text').data(data);
txt.enter().append('text')
.attr('x', width * 0.01)
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.text(function(d) {return d.label; })
.style('font-family', 'sans-serif');
txt.transition()
.duration(1000)
.attr('x', width * 0.01)
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.text(function(d) {return d.label; });
txt.exit().remove();
// Numeric labels
var totals = svg.selectAll().data(data);
totals.enter().append('text')
.attr('x', function(d) { return ((d.y * col_width()) + col_left()) * 1.01; })
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.style('font-family', 'sans-serif')
.text(function(d) {return d.ylabel; });
totals.transition()
.duration(1000)
.attr('x', function(d) { return ((d.y * col_width()) + col_left()) * 1.01; })
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.attr('d', function(d) { return d.x; })
.text(function(d) {return d.ylabel; });
totals.exit().remove();
"
r2d3_file <- tempfile()
writeLines(r2d3_script, r2d3_file)
ui <- fluidPage(
selectInput("var", "Variable",
list("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class"),
selected = "class"),
d3Output("d3"),
DT::dataTableOutput("table"),
textInput("val", "Value", "class")
)
server <- function(input, output, session) {
output$d3 <- renderD3({
Biopsy %>%
mutate(label = !!sym(input$var)) %>%
group_by(label) %>%
tally() %>%
arrange(desc(n)) %>%
mutate(
y = n,
ylabel = prettyNum(n, big.mark = ","),
fill = ifelse(label != input$val, "#E69F00", "red"),
mouseover = "#0072B2"
) %>%
r2d3(r2d3_file)
})
observeEvent(input$bar_clicked, {
updateTextInput(session, "val", value = input$bar_clicked)
})
output$table <- renderDataTable({
Biopsy %>%
filter(!!sym(input$var) == input$val) %>%
datatable()
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='oluwadaremargaret', token='F92A3A1EDD0E3DE86377FF892DF78A6F', secret='qUyj5xHsRUuSq6JzHbCT4hj8VaoJcPExQupbYy7V')
library(rsconnect)
rsconnect::deployApp("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4/newWk4.R")
rsconnect::deployApp("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4")
rsconnect::deployApp("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4")
rsconnect::deployApp("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4")
rsconnect::deployApp("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4", account = oluwadaremargaret)
rsconnect::deployApp("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4")
rsconnect::deployApp("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4")
