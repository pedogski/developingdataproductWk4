data(biopsy)
# Chunk 2: cleaning data
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Chunk 3: Plotly plots of biospy data
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
colorscale = list(c(0, "rgb(227, 25, 54)"), list(1, "rgb(194, 205, 35)")),
showscale = T)) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(194, 205, 35))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(194, 205, 20))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(194, 205, 1))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(194, 0.5, 1))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
list(1, rgb(0, 0.5, 1))),
showscale = F) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
)
plot_ly(data = bc, x = ~age, y = ~mnp,
color = ~as.factor(class), size = ~brtq,
text = ~paste("Class: ", age, '<br>mnp:', mnp),
type = "scatter", mode = "markers") %>%
layout(title = "Breast cancer Data")
plot_ly(data = bc, x = ~ts, y = ~brtq, type="scatter", mode = "markers",
name = "Tumor size", legendgroup = "Tumour size",
mode= "lines", fill= ~age) %>%
layout(title = "Breast cancer Data")
library(rgl)
with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age)))
subid <- currentSubscene3d()
rglwidget(elementId = "plot3drgl")
with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age)))
rglwidget(elementId = "plot3drgl")
library(rgl)
library(plotly)
plotly(with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age))),
rglwidget(elementId = "plot3drgl")
)
plotly(with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age))),
rglwidget(elementId = "plot3drgl")
)%>% toWebGL()
#suppressPackageStartupMessages(library(plotly))
#type1
plot_ly(data = bc, x = ~age, y = ~mnp,
color = ~as.factor(class), size = ~brtq,
text = ~paste("Class: ", age, '<br>mnp:', mnp),
type = "scatter", mode = "markers") %>%
layout(title = "Breast cancer Data")%>% toWebGL()
#type4
plot_ly(data = bc, x = ~age, y = ~class, z = ~brtq,
marker = list(color = c("blue", "gold"),
colorscale = list(c(0, "rgb(227, 25, 54)"), list(1, "rgb(194, 205, 35)")),
showscale = T)) %>%
add_markers() %>%
layout(
title = "Breast cancer data",
scene = list(xaxis = list(title = 'Age factor'),
yaxis = list(title = 'Cancerclass'),
zaxis = list(title = 'Breast quadrant'))
) %>% toWebGL()
plot1 <- plotly(with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age))),
rglwidget(elementId = "plot3drgl")
)
plot1 <- with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age)))
rglwidget(elementId = "plot3drgl")
plot1 <- with(bc, plot3d(class, age, brtq,
type = "s", col = as.numeric(age)))
plot1a <- plot1 %>% plot_ly()
plot1a <- plot1 %>% plot_ly(bc)
plot1a <- plot_ly(bc)%>%plot1
m <- plot_ly(data = bc, x = ~age, y = ~mnp,
color = ~as.factor(class), size = ~brtq,
text = ~paste("Class: ", age, '<br>mnp:', mnp),
type = "scatter", mode = "markers") %>%
layout(title = "Breast cancer Data")
m %>% toWebGL()
library(MASS); library(corrplot); library(ggplot2); library(tidyverse);
library(plotly)
library(rgl); library(rglwidget)
data(biopsy)
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Point colors
marker <- list(color = ~class, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)
# Create the plot
p <- plot_ly(bc, x = ~age, y = ~mnp, z = ~brtq, marker = marker) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'age'),
yaxis = list(title = 'menopause'),
zaxis = list(title = 'breast quarter'),
title = "Breast cancer Data")
)
p
# Chunk 1: loading library and data
library(MASS); library(corrplot); library(ggplot2); library(tidyverse);
library(plotly)
library(rgl); library(rglwidget)
data(biopsy)
# Chunk 2: perform data cleaning
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Chunk 3: Plot
# Point colors
marker <- list(color = ~class, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)
# Create the plot
p <- plot_ly(bc, x = ~age, y = ~mnp, z = ~brtq, marker = marker) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'age'),
yaxis = list(title = 'menopause'),
zaxis = list(title = 'breast quarter'),
title = "Breast cancer Data")
)
p
# Chunk 1: loading library and data
library(MASS); library(corrplot); library(ggplot2); library(tidyverse);
library(plotly)
library(rgl); library(rglwidget)
data(biopsy)
# Chunk 2: perform data cleaning
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Chunk 3: Plot
# Point colors
marker <- list(color = ~class, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)
# Create the plot
p <- plot_ly(bc, x = ~age, y = ~mnp, z = ~brtq, marker = marker) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'age'),
yaxis = list(title = 'menopause'),
zaxis = list(title = 'breast quarter'),
title = "Breast cancer Data")
)
p
# Chunk 1: loading library and data
library(MASS); library(corrplot); library(ggplot2); library(tidyverse);
library(plotly)
library(rgl); library(rglwidget)
data(biopsy)
# Chunk 2: perform data cleaning
bc <- biopsy[-1]
names(bc) <- c("age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
bc = na.omit(bc)
str(bc)
# Chunk 3: Plot
# Point colors
marker <- list(color = ~class, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)
# Create the plot
p <- plot_ly(bc, x = ~age, y = ~mnp, z = ~brtq, marker = marker) %>%
add_markers() %>%
layout(
scene = list(xaxis = list(title = 'age'),
yaxis = list(title = 'menopause'),
zaxis = list(title = 'breast quarter'),
title = "Breast cancer Data")
)
p
install.packages("glue")
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs)*
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs)*
pkgs <- c('ramnathv/slidifyLibraries', 'ramnathv/slidify')
devtools::install_github(pkgs)
library(shiny); runApp('R/coursera/developing data product/developingdataproductWk4/moluwadare.R')
runApp('R/coursera/developing data product/developingdataproductWk4/moluwadare.R')
runApp('R/coursera/developing data product/developingdataproductWk4/moluwadare.R')
setwd("C:/Users/HP/OneDrive/Documents/R/coursera/developing data product/developingdataproductWk4")
runApp('moluwadare.R')
runApp('moluwadare.R')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(r2d3)
library(forcats)
library(DT)
library(rlang)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
names(biopsy)
r2d3_script <- "
// !preview r2d3 data= data.frame(y = 0.1, ylabel = '1%', fill = '#E69F00', mouseover = 'green', label = 'one', id = 1)
function svg_height() {return parseInt(svg.style('height'))}
function svg_width()  {return parseInt(svg.style('width'))}
function col_top()  {return svg_height() * 0.05; }
function col_left() {return svg_width()  * 0.20; }
function actual_max() {return d3.max(data, function (d) {return d.y; }); }
function col_width()  {return (svg_width() / actual_max()) * 0.55; }
function col_heigth() {return svg_height() / data.length * 0.95; }
var bars = svg.selectAll('rect').data(data);
bars.enter().append('rect')
.attr('x',      col_left())
.attr('y',      function(d, i) { return i * col_heigth() + col_top(); })
.attr('width',  function(d) { return d.y * col_width(); })
.attr('height', col_heigth() * 0.9)
.attr('fill',   function(d) {return d.fill; })
.attr('id',     function(d) {return (d.label); })
.on('click', function(){
Shiny.setInputValue('bar_clicked', d3.select(this).attr('id'), {priority: 'event'});
})
.on('mouseover', function(){
d3.select(this).attr('fill', function(d) {return d.mouseover; });
})
.on('mouseout', function(){
d3.select(this).attr('fill', function(d) {return d.fill; });
});
bars.transition()
.duration(500)
.attr('x',      col_left())
.attr('y',      function(d, i) { return i * col_heigth() + col_top(); })
.attr('width',  function(d) { return d.y * col_width(); })
.attr('height', col_heigth() * 0.9)
.attr('fill',   function(d) {return d.fill; })
.attr('id',     function(d) {return d.label; });
bars.exit().remove();
// Identity labels
var txt = svg.selectAll('text').data(data);
txt.enter().append('text')
.attr('x', width * 0.01)
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.text(function(d) {return d.label; })
.style('font-family', 'sans-serif');
txt.transition()
.duration(1000)
.attr('x', width * 0.01)
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.text(function(d) {return d.label; });
txt.exit().remove();
// Numeric labels
var totals = svg.selectAll().data(data);
totals.enter().append('text')
.attr('x', function(d) { return ((d.y * col_width()) + col_left()) * 1.01; })
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.style('font-family', 'sans-serif')
.text(function(d) {return d.ylabel; });
totals.transition()
.duration(1000)
.attr('x', function(d) { return ((d.y * col_width()) + col_left()) * 1.01; })
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.attr('d', function(d) { return d.x; })
.text(function(d) {return d.ylabel; });
totals.exit().remove();
"
r2d3_file <- tempfile()
writeLines(r2d3_script, r2d3_file)
ui <- fluidPage(
selectInput("var", "Variable",
list("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class"),
selected = "class"),
d3Output("d3"),
DT::dataTableOutput("table"),
textInput("val", "Value", "class")
)
server <- function(input, output, session) {
output$d3 <- renderD3({
biopsy %>%
mutate(label = !!sym(input$var)) %>%
group_by(label) %>%
tally() %>%
arrange(desc(n)) %>%
mutate(
y = n,
ylabel = prettyNum(n, big.mark = ","),
fill = ifelse(label != input$val, "#E69F00", "red"),
mouseover = "#0072B2"
) %>%
r2d3(r2d3_file)
})
observeEvent(input$bar_clicked, {
updateTextInput(session, "val", value = input$bar_clicked)
})
output$table <- renderDataTable({
biopsy %>%
filter(!!sym(input$var) == input$val) %>%
datatable()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(r2d3)
library(forcats)
library(DT)
library(rlang)
attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(r2d3)
library(forcats)
library(DT)
library(rlang)
attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
r2d3_script <- "
// !preview r2d3 data= data.frame(y = 0.1, ylabel = '1%', fill = '#E69F00', mouseover = 'green', label = 'one', id = 1)
function svg_height() {return parseInt(svg.style('height'))}
function svg_width()  {return parseInt(svg.style('width'))}
function col_top()  {return svg_height() * 0.05; }
function col_left() {return svg_width()  * 0.20; }
function actual_max() {return d3.max(data, function (d) {return d.y; }); }
function col_width()  {return (svg_width() / actual_max()) * 0.55; }
function col_heigth() {return svg_height() / data.length * 0.95; }
var bars = svg.selectAll('rect').data(data);
bars.enter().append('rect')
.attr('x',      col_left())
.attr('y',      function(d, i) { return i * col_heigth() + col_top(); })
.attr('width',  function(d) { return d.y * col_width(); })
.attr('height', col_heigth() * 0.9)
.attr('fill',   function(d) {return d.fill; })
.attr('id',     function(d) {return (d.label); })
.on('click', function(){
Shiny.setInputValue('bar_clicked', d3.select(this).attr('id'), {priority: 'event'});
})
.on('mouseover', function(){
d3.select(this).attr('fill', function(d) {return d.mouseover; });
})
.on('mouseout', function(){
d3.select(this).attr('fill', function(d) {return d.fill; });
});
bars.transition()
.duration(500)
.attr('x',      col_left())
.attr('y',      function(d, i) { return i * col_heigth() + col_top(); })
.attr('width',  function(d) { return d.y * col_width(); })
.attr('height', col_heigth() * 0.9)
.attr('fill',   function(d) {return d.fill; })
.attr('id',     function(d) {return d.label; });
bars.exit().remove();
// Identity labels
var txt = svg.selectAll('text').data(data);
txt.enter().append('text')
.attr('x', width * 0.01)
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.text(function(d) {return d.label; })
.style('font-family', 'sans-serif');
txt.transition()
.duration(1000)
.attr('x', width * 0.01)
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.text(function(d) {return d.label; });
txt.exit().remove();
// Numeric labels
var totals = svg.selectAll().data(data);
totals.enter().append('text')
.attr('x', function(d) { return ((d.y * col_width()) + col_left()) * 1.01; })
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.style('font-family', 'sans-serif')
.text(function(d) {return d.ylabel; });
totals.transition()
.duration(1000)
.attr('x', function(d) { return ((d.y * col_width()) + col_left()) * 1.01; })
.attr('y', function(d, i) { return i * col_heigth() + (col_heigth() / 2) + col_top(); })
.attr('d', function(d) { return d.x; })
.text(function(d) {return d.ylabel; });
totals.exit().remove();
"
r2d3_file <- tempfile()
writeLines(r2d3_script, r2d3_file)
ui <- fluidPage(
selectInput("var", "Variable",
list("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class"),
selected = "class"),
d3Output("d3"),
DT::dataTableOutput("table"),
textInput("val", "Value", "class")
)
server <- function(input, output, session) {
output$d3 <- renderD3({
biopsy %>%
mutate(label = !!sym(input$var)) %>%
group_by(label) %>%
tally() %>%
arrange(desc(n)) %>%
mutate(
y = n,
ylabel = prettyNum(n, big.mark = ","),
fill = ifelse(label != input$val, "#E69F00", "red"),
mouseover = "#0072B2"
) %>%
r2d3(r2d3_file)
})
observeEvent(input$bar_clicked, {
updateTextInput(session, "val", value = input$bar_clicked)
})
output$table <- renderDataTable({
biopsy %>%
filter(!!sym(input$var) == input$val) %>%
datatable()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(r2d3)
library(forcats)
library(DT)
library(rlang)
biopsy <- attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
biopsy <- attach(biopsy)
names(biopsy)
rm(list=ls())
names(biopsy)
biopsy <- attach(biopsy)
library(shiny)
library(dplyr)
library(r2d3)
library(forcats)
library(MASS)
library(DT)
library(rlang)
biopsy <- attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
rm(list=ls())
library(shiny)
library(dplyr)
library(r2d3)
library(forcats)
library(MASS)
library(DT)
library(rlang)
biopsy <- attach(biopsy)
View(biopsy)
names(biopsy)
names(biopsy) <- c("class", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "ID")
runApp('moluwadare.R')
rm(list=ls())
runApp('moluwadare.R')
knitr::opts_chunk$set(eval = TRUE, echo = TRUE, results = "hide", message = FALSE, warning = FALSE)
biopsy <- attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
biopsy <- attach(biopsy)
name(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
biopsy <- attach(biopsy)
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
names(biopsy) <- c("ID", "age", "mnp", "ts", "inv", "ndc", "deM", "breast", "brtq", "irat", "class" )
q()
